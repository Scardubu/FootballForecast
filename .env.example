# =============================================================================
# FOOTBALL FORECAST - LOCAL DEVELOPMENT ENVIRONMENT CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# PostgreSQL connection string for local development
# Format: postgresql://username:password@host:port/database
# Example for local PostgreSQL: postgresql://postgres:password@localhost:5432/football_forecast
# Example for Docker: postgresql://postgres:password@localhost:5433/football_forecast
DATABASE_URL=postgresql://postgres:password@localhost:5432/football_forecast

# -----------------------------------------------------------------------------
# APPLICATION CONFIGURATION
# -----------------------------------------------------------------------------
# Port for the main application server (both API and frontend)
# Default: 5000
PORT=5000

# Node.js environment (development, production, test)
NODE_ENV=development

# -----------------------------------------------------------------------------
# MANAGED WEBSOCKET (OPTIONAL)
# -----------------------------------------------------------------------------
# Enable to use a managed WebSocket provider instead of local /ws endpoint
# Vite exposes VITE_* variables to the client bundle
VITE_WS_ENABLED=false
# Example: wss://your-managed-ws-provider.example.com/path
VITE_WS_URL=
# Optional bearer-like token (appended as query param token=)
VITE_WS_AUTH_TOKEN=

# -----------------------------------------------------------------------------
# PYTHON ML SERVICE CONFIGURATION
# -----------------------------------------------------------------------------
# Port for the Python FastAPI ML service
ML_SERVICE_PORT=8000

# ML service base URL (for Node.js backend to communicate with Python service)
ML_SERVICE_URL=http://localhost:8000
# Timeout in milliseconds for ML requests
ML_SERVICE_TIMEOUT=30000
# Control statistical fallback predictions (true/false). In production, defaults to false unless explicitly enabled.
ML_FALLBACK_ENABLED=false

# -----------------------------------------------------------------------------
# EXTERNAL API CONFIGURATION
# -----------------------------------------------------------------------------
# API-Football service configuration (for live football data)
# Get your free API key from: https://www.api-football.com/
API_FOOTBALL_KEY=your_api_football_key_here
API_FOOTBALL_HOST=v3.football.api-sports.io

# Rate limiting for API calls (requests per minute)
API_RATE_LIMIT=100

# -----------------------------------------------------------------------------
# SESSION CONFIGURATION
# -----------------------------------------------------------------------------
# Secret key for session management (generate a strong random string)
# You can generate one using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SESSION_SECRET=your_session_secret_key_here

# Session cookie settings
SESSION_MAX_AGE=86400000
SESSION_SECURE=false

# -----------------------------------------------------------------------------
# SCRAPING CONFIGURATION
# -----------------------------------------------------------------------------
# Enable/disable web scraping features
ENABLE_SCRAPING=true

# Scraping intervals (in milliseconds)
SCRAPING_INTERVAL_FIXTURES=3600000
SCRAPING_INTERVAL_STANDINGS=7200000

# User agent for web scraping
SCRAPING_USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36

# -----------------------------------------------------------------------------
# LOGGING CONFIGURATION
# -----------------------------------------------------------------------------
# Log level (error, warn, info, debug)
LOG_LEVEL=info

# Enable pretty printing for development logs
LOG_PRETTY=true

# -----------------------------------------------------------------------------
# DEVELOPMENT TOOLS
# -----------------------------------------------------------------------------
# Enable development features
ENABLE_DEV_TOOLS=true

# Hot reload for development
ENABLE_HOT_RELOAD=true

# -----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# -----------------------------------------------------------------------------
# CORS origins (comma-separated list for multiple origins)
CORS_ORIGINS=http://localhost:3000,http://localhost:5000,http://127.0.0.1:5000

# Rate limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# -----------------------------------------------------------------------------
# OPTIONAL: DOCKER CONFIGURATION
# -----------------------------------------------------------------------------
# PostgreSQL configuration for Docker Compose
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=football_forecast
POSTGRES_PORT=5433

# -----------------------------------------------------------------------------
# OPTIONAL: PRODUCTION OVERRIDES
# -----------------------------------------------------------------------------
# Uncomment and modify these for production deployment

# DATABASE_URL=postgresql://user:password@production-host:5432/football_forecast
# NODE_ENV=production
# SESSION_SECURE=true
# LOG_LEVEL=warn
# LOG_PRETTY=false
# ENABLE_DEV_TOOLS=false
# ENABLE_HOT_RELOAD=false

# -----------------------------------------------------------------------------
# SETUP INSTRUCTIONS
# -----------------------------------------------------------------------------
# 1. Copy this file to .env: cp .env.example .env
# 2. Update DATABASE_URL with your PostgreSQL connection details
# 3. Generate a SESSION_SECRET: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 4. Get API_FOOTBALL_KEY from https://www.api-football.com/ (optional, sample data available)
# 5. Install and start PostgreSQL locally or use Docker Compose
# 6. Run database migrations: npm run db:push
# 7. Start the application: npm run dev
