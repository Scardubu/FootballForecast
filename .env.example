# =============================================================================
# FOOTBALL FORECAST - LOCAL DEVELOPMENT ENVIRONMENT CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# DATABASE CONFIGURATION (NEON.TECH)
# -----------------------------------------------------------------------------
# Neon Project: sabiscore
# Project ID: cool-sky-13418990
# Organization: Scar (org-silent-mouse-39300259)
# User ID: eed674d1-5f3d-427f-9b24-a0ebc0617ea3
#
# Neon.tech PostgreSQL connection string
# Format: postgresql://[user]:[password]@[endpoint]/[database]?sslmode=require
# Get your connection string from: https://console.neon.tech/app/projects/cool-sky-13418990
# Example: postgresql://user:password@ep-cool-sky-13418990.us-east-1.aws.neon.tech/sabiscore?sslmode=require
DATABASE_URL=postgresql://your-user:your-password@ep-cool-sky-13418990.us-east-1.aws.neon.tech/sabiscore?sslmode=require

# -----------------------------------------------------------------------------
# APPLICATION CONFIGURATION
# -----------------------------------------------------------------------------
# Port for the main application server (both API and frontend)
# Default: 5000
PORT=5000

# Node.js environment (development, production, test)
NODE_ENV=development

# -----------------------------------------------------------------------------
# MANAGED WEBSOCKET (OPTIONAL)
# -----------------------------------------------------------------------------
# Enable to use a managed WebSocket provider instead of local /ws endpoint
# Vite exposes VITE_* variables to the client bundle
VITE_WS_ENABLED=false
# Example: wss://your-managed-ws-provider.example.com/path
VITE_WS_URL=
# Optional bearer-like token (appended as query param token=)
VITE_WS_AUTH_TOKEN=

# -----------------------------------------------------------------------------
# PYTHON ML SERVICE CONFIGURATION
# -----------------------------------------------------------------------------
# Port for the Python FastAPI ML service
ML_SERVICE_PORT=8000

# ML service base URL (for Node.js backend to communicate with Python service)
ML_SERVICE_URL=http://localhost:8000
# Timeout in milliseconds for ML requests
ML_SERVICE_TIMEOUT=30000
# Control statistical fallback predictions (true/false). In production, defaults to false unless explicitly enabled.
ML_FALLBACK_ENABLED=false
# Trigger ML model training for 3+ historical seasons on server startup (true/false)
# WARNING: This can take 5-10 minutes. Enable for initial setup only.
ML_TRAIN_ON_STARTUP=false

# -----------------------------------------------------------------------------
# EXTERNAL API CONFIGURATION
# -----------------------------------------------------------------------------
# API-Football service configuration (for live football data)
# Get your free API key from: https://www.api-football.com/
API_FOOTBALL_KEY=your_api_football_key_here
API_FOOTBALL_HOST=v3.football.api-sports.io

# Rate limiting for API calls (requests per minute)
API_RATE_LIMIT=100

# API Bearer token for internal authentication (must be >=20 chars)
# Generate securely: openssl rand -hex 32
API_BEARER_TOKEN=your_secure_api_bearer_token_here

# -----------------------------------------------------------------------------
# NETLIFY CONFIGURATION
# -----------------------------------------------------------------------------
# Netlify Project: sabiscore
# Site ID (also known as Project ID)
NETLIFY_SITE_ID=a4ba3cd3-9376-4d79-8a3f-f376b2b57cc1

# Netlify Personal Access Token
NETLIFY_AUTH_TOKEN=nfp_PU6zf4UE2VrZjLFKytadE7Ch8uoTXi3c0481

# OAuth Configuration
NETLIFY_CLIENT_ID=8Wj2DNwnNF_giwSvdIQD0OuWk-t36fjqm85_e_4NyQc
NETLIFY_CLIENT_SECRET=F1z9jljpYWj0NeD83dRqkVytj80ZlHp4YfiGSl6xuQ0
NETLIFY_REDIRECT_URI=urn:ietf:wg:oauth:2.0:oob

# -----------------------------------------------------------------------------
# AUTHENTICATION CONFIGURATION (STACK AUTH)
# -----------------------------------------------------------------------------
# Stack Auth Project ID
STACK_AUTH_PROJECT_ID=8b0648c2-f267-44c1-b4c2-a64eccb6f737

# Stack Auth JWKS URL for JWT verification
STACK_AUTH_JWKS_URL=https://api.stack-auth.com/api/v1/projects/8b0648c2-f267-44c1-b4c2-a64eccb6f737/.well-known/jwks.json

# -----------------------------------------------------------------------------
# Enable/disable web scraping features
ENABLE_SCRAPING=true

# Scraping intervals (in milliseconds)
SCRAPING_INTERVAL_FIXTURES=3600000
SCRAPING_INTERVAL_STANDINGS=7200000

# User agent for web scraping
SCRAPING_USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36

# Internal API base for scraper persistence
# Used by Python scrapers to POST to the Node backend /api/scraped-data
API_BASE_URL=http://localhost:5000

# Authentication token required by /api/scraped-data (must be >=20 chars)
# Generate securely: openssl rand -hex 32
SCRAPER_AUTH_TOKEN=your_long_random_scraper_token_here

# Optional proxy pool for Playwright scraping (rotated automatically)
# Format: server:port or server:port:username:password
# PROXY_1=proxy1.example.com:3128
# PROXY_2=proxy2.example.com:3128:user:pass

# Scheduler intervals (milliseconds)
# Odds refresh default: 10 minutes
SCRAPE_ODDS_INTERVAL_MS=600000
# Injury refresh default: 1 hour
SCRAPE_INJURY_INTERVAL_MS=3600000

# -----------------------------------------------------------------------------
# PREDICTION SYNC CONFIGURATION
# -----------------------------------------------------------------------------
# Number of upcoming fixtures to sync predictions for (per league)
# Default: 5
PREDICTION_FIXTURE_LOOKAHEAD=5

# Time in minutes before a prediction is considered stale and refreshed
# Default: 90 (1.5 hours)
PREDICTION_REFRESH_MINUTES=90

# Number of recent matches to fetch for teams without history
# Default: 8
PREDICTION_RECENT_MATCH_SAMPLE=8

# Interval in minutes between prediction sync runs
# Default: 15
PREDICTION_SYNC_INTERVAL_MINUTES=15

# Disable prediction sync entirely (useful for free API plans)
# When disabled, application will use on-demand fallback predictions only
# RECOMMENDED: Set to true for free API plans to avoid quota exhaustion
# Default: false
# Set to true if you're using a free API plan or want to conserve API quota
DISABLE_PREDICTION_SYNC=true

# -----------------------------------------------------------------------------
# LOGGING CONFIGURATION
# -----------------------------------------------------------------------------
# Log level (error, warn, info, debug)
LOG_LEVEL=info

# Enable pretty printing for development logs
LOG_PRETTY=true

# -----------------------------------------------------------------------------
# DEVELOPMENT TOOLS
# -----------------------------------------------------------------------------
# Enable development features
ENABLE_DEV_TOOLS=true

# Hot reload for development
ENABLE_HOT_RELOAD=true

# -----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# -----------------------------------------------------------------------------
# CORS origins (comma-separated list for multiple origins)
CORS_ORIGINS=http://localhost:3000,http://localhost:5000,http://127.0.0.1:5000

# Rate limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# -----------------------------------------------------------------------------
# OPTIONAL: DOCKER CONFIGURATION
# -----------------------------------------------------------------------------
# PostgreSQL configuration for Docker Compose
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=football_forecast
POSTGRES_PORT=5433

# -----------------------------------------------------------------------------
# OPTIONAL: PRODUCTION OVERRIDES
# -----------------------------------------------------------------------------
# Uncomment and modify these for production deployment

# DATABASE_URL=postgresql://user:password@production-host:5432/football_forecast
# NODE_ENV=production
# SESSION_SECURE=true
# LOG_LEVEL=warn
# LOG_PRETTY=false
# ENABLE_DEV_TOOLS=false
# ENABLE_HOT_RELOAD=false

# -----------------------------------------------------------------------------
# SETUP INSTRUCTIONS
# -----------------------------------------------------------------------------
# 1. Copy this file to .env: cp .env.example .env
# 2. Update DATABASE_URL with your PostgreSQL connection details
# 3. Generate a SESSION_SECRET: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 4. Get API_FOOTBALL_KEY from https://www.api-football.com/ (optional, sample data available)
# 5. Install and start PostgreSQL locally or use Docker Compose
# 6. Run database migrations: npm run db:push
# 7. Start the application: npm run dev
